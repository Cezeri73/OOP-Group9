/**
 * @file SmartDevice.cpp
 * @brief Implementation of the SmartDevice class, representing the base class for all smart devices.
 */

#include "SmartDevice.h"
#include "Light.h"

/**
 * @brief Static notification buffer shared by all SmartDevice objects.
 * 
 * This buffer is used to store and display notifications generated by smart devices.
 */
Fl_Text_Buffer *SmartDevice::notificationBuffer = new Fl_Text_Buffer();

/**
 * @brief Adds a notification message to the notification buffer.
 * 
 * Appends the provided message to the shared notification buffer, followed by a newline character.
 * 
 * @param message The notification message to add.
 */
void SmartDevice::addNotification(const std::string &message)
{
    // Append the message followed by a newline character to the buffer
    notificationBuffer->append((message + "\n").c_str());
}

/**
 * @brief Returns the name of the SmartDevice as a C-style string.
 * 
 * Converts the `name` string to a C-style string and returns it.
 * 
 * @return The name of the device as a C-style string.
 */
const char *SmartDevice::getName()
{
    return name.c_str(); // Convert and return the name as a C-style string
}

/**
 * @brief Serializes the SmartDevice object to a JSON representation.
 * 
 * Converts the device type into a JSON object for saving or transferring.
 * 
 * @return A JSON object containing the device's type.
 */
json SmartDevice::toJson() const
{
    // Create a JSON object with the device type
    return json{{"type", type}};
}

/**
 * @brief Deserializes a SmartDevice object from a JSON representation.
 * 
 * Recreates a SmartDevice object based on the type specified in the JSON data.
 * 
 * @param j A JSON object containing the device's data.
 * @return A pointer to the newly created SmartDevice object, or nullptr if the type is unrecognized.
 */
SmartDevice *SmartDevice::fromJson(const json &j)
{
    // Extract the device type from the JSON
    std::string type = j.at("type").get<std::string>();

    // Create and return a new device object based on the type
    if (type == "Light")
    {
        return new Light("Light"); // Return a new Light device if the type matches
    }
    return nullptr; // Return nullptr if the type is unrecognized
}
